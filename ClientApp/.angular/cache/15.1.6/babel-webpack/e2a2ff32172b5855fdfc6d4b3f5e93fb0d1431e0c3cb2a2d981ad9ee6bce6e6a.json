{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataServiceService {\n  constructor(_http, _baseUrl) {\n    this.projects = [];\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.http = _http;\n    this.baseUrl = _baseUrl;\n  }\n  getProjects() {\n    this.http.get(this.baseUrl + 'projects').subscribe(result => {\n      this.projects = result;\n    }, error => console.error(error));\n    return of(this.projects);\n  }\n  addProject(project) {\n    return this.http.post(this.baseUrl, project, this.httpOptions);\n  }\n  filterProjects(selectedType, selectedLang) {\n    if (selectedType == \"All\" && selectedLang == \"All\") {\n      return of(this.projects);\n    } else if (selectedLang == \"All\" && selectedType != \"All\") {\n      return of(this.projects.filter(item => item.type == selectedType));\n    } else if (selectedLang != \"All\" && selectedType == \"All\") {\n      return of(this.projects.filter(item => item.language == selectedLang));\n    } else {\n      return of(this.projects.filter(item => item.language == selectedLang).filter(item => item.type == selectedType));\n    }\n  }\n}\nDataServiceService.ɵfac = function DataServiceService_Factory(t) {\n  return new (t || DataServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nDataServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataServiceService,\n  factory: DataServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,EAAE,QAAa,MAAM;;;AAM1C,OAAM,MAAOC,kBAAkB;EAS7BC,YAAYC,KAAiB,EAAsBC,QAAgB;IAN5D,aAAQ,GAAc,EAAE;IAE/B,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;IAGC,IAAI,CAACO,IAAI,GAAGH,KAAK;IACjB,IAAI,CAACI,OAAO,GAAGH,QAAQ;EACzB;EACAI,WAAW;IAEV,IAAI,CAACF,IAAI,CAACG,GAAG,CAAa,IAAI,CAACF,OAAO,GAAG,UAAU,CAAC,CAACG,SAAS,CAACC,MAAM,IAAG;MACtE,IAAI,CAACC,QAAQ,GAAGD,MAAM;IACxB,CAAC,EAAEE,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;IAChC,OAAOb,EAAE,CAAC,IAAI,CAACY,QAAQ,CAAC;EAE1B;EAEAG,UAAU,CAACC,OAAe;IACxB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAU,IAAI,CAACV,OAAO,EAAES,OAAO,EAAE,IAAI,CAACE,WAAW,CAAC;EAEzE;EAEAC,cAAc,CAACC,YAAmB,EAAEC,YAAmB;IACrD,IAAID,YAAY,IAAI,KAAK,IAAIC,YAAY,IAAI,KAAK,EAAE;MAClD,OAAOrB,EAAE,CAAC,IAAI,CAACY,QAAQ,CAAC;KACzB,MACI,IAAIS,YAAY,IAAI,KAAK,IAAID,YAAY,IAAI,KAAK,EAAE;MACvD,OAAOpB,EAAE,CAAC,IAAI,CAACY,QAAQ,CAACU,MAAM,CAACC,IAAI,IAAKA,IAAI,CAACC,IAAI,IAAIJ,YAAa,CAAC,CAAC;KACrE,MACI,IAAIC,YAAY,IAAI,KAAK,IAAID,YAAY,IAAI,KAAK,EAAE;MACvD,OAAOpB,EAAE,CAAC,IAAI,CAACY,QAAQ,CAACU,MAAM,CAACC,IAAI,IAAKA,IAAI,CAACE,QAAQ,IAAIJ,YAAa,CAAC,CAAC;KACzE,MACI;MACD,OAAOrB,EAAE,CAAC,IAAI,CAACY,QAAQ,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACE,QAAQ,IAAIJ,YAAY,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,IAAIJ,YAAY,CAAC,CAAC;;EAEtH;;AAxCWnB,kBAAkB;mBAAlBA,kBAAkB,0CASU,UAAU;AAAA;AATtCA,kBAAkB;SAAlBA,kBAAkB;EAAAyB,SAAlBzB,kBAAkB;EAAA0B,YAFjB;AAAM","names":["HttpHeaders","of","DataServiceService","constructor","_http","_baseUrl","headers","http","baseUrl","getProjects","get","subscribe","result","projects","error","console","addProject","project","post","httpOptions","filterProjects","selectedType","selectedLang","filter","item","type","language","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\okeef\\Documents\\03Personal\\02Projects\\PortfolioWebsiteKgoDev\\ClientApp\\src\\app\\services\\data-service.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Observable, of, tap } from 'rxjs';\r\nimport { Project } from '../models/project.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataServiceService {\r\n  http: HttpClient;\r\n  baseUrl: string;\r\n  public projects: Project[] = [];\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(_http: HttpClient, @Inject('BASE_URL') _baseUrl: string) {\r\n    this.http = _http;\r\n    this.baseUrl = _baseUrl;\r\n  }\r\n  getProjects():Observable<Project[]> {\r\n\r\n   this.http.get<Project[]> (this.baseUrl + 'projects').subscribe(result => {\r\n     this.projects = result;\r\n   }, error => console.error(error));\r\n    return of(this.projects);\r\n    \r\n  }\r\n\r\n  addProject(project:Project):Observable<Project> {\r\n    return this.http.post<Project>(this.baseUrl, project, this.httpOptions);\r\n    \r\n  }\r\n\r\n  filterProjects(selectedType:string, selectedLang:string): Observable<Project[]> {\r\n    if (selectedType == \"All\" && selectedLang == \"All\") {\r\n      return of(this.projects);\r\n    }\r\n    else if (selectedLang == \"All\" && selectedType != \"All\") {\r\n      return of(this.projects.filter(item => (item.type == selectedType)));\r\n    }\r\n    else if (selectedLang != \"All\" && selectedType == \"All\") {\r\n      return of(this.projects.filter(item => (item.language == selectedLang)));\r\n    }\r\n    else {\r\n        return of(this.projects.filter(item => item.language == selectedLang).filter(item => item.type == selectedType));\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}